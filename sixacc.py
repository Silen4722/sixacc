import asyncio
from datetime import datetime
import logging
from telethon import TelegramClient
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import time

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
ACCOUNTS = [
    {
        'api_id': 29229629,
        'api_hash': '377e49103c36fa08cbdaf9bb6b7e7001',
        'phone': '+17048286887',
        'session_name': 'account1'
    },
    {
        'api_id': 20092299,
        'api_hash': '3fd269a1254dbfb6116b04c9b76b8fa3',
        'phone': '+17048287153',
        'session_name': 'account2'
    },
    {
        'api_id': 24472406,
        'api_hash': '3256ff2d688ab2644f5b1e26cfd9cc77',
        'phone': '+17048288442',
        'session_name': 'account3'
    },
    {
        'api_id': 28788132,
        'api_hash': '412762dd2adfda4bd4cc497afa201b22',
        'phone': '+17048286761',
        'session_name': 'account4'
    },
    {
        'api_id': 20021961,
        'api_hash': '0dc2fbb740f731390e988c39d6a4aa28',
        'phone': '+17048288755',
        'session_name': 'account5'
    },
    {
        'api_id': 21763431,
        'api_hash': '4fd10a998804b9b3c5d990700151d689',
        'phone': '+17048287505',
        'session_name': 'account6'
    }
]

bot_token = '8154627364:AAG1YkrensrF2QqxrekUWDlo2V3dTz9_3LI'
source_chat = '@VitalikOnyshch'  # –ß–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    set_text = State()
    set_interval = State()
    add_chat = State()
    remove_chat = State()
    forward_message = State()
    set_forward_id = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è

class Account:
    def __init__(self, api_id, api_hash, phone, session_name):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.session_name = session_name
        self.client = TelegramClient(session_name, api_id, api_hash)
        
        self.message_text = '–ü—Ä–∏–≤–µ—Ç!'
        self.send_interval = 60
        self.send_offset = 0
        self.is_scheduled = False
        
        self.forward_message_id = None
        self.cron_minute = 0
        self.is_forward_scheduled = False
        
        self.target_chats = []
        self.auth_attempts = 0
        self.max_auth_attempts = 3
        self.is_authenticated = False
    
    async def start(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        while self.auth_attempts < self.max_auth_attempts:
            try:
                await self.client.start(phone=self.phone)
                self.is_authenticated = True
                print(f"‚úÖ {self.session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return True
            except Exception as e:
                self.auth_attempts += 1
                if self.auth_attempts >= self.max_auth_attempts:
                    print(f"‚ùå {self.session_name}: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ {self.max_auth_attempts} –ø–æ–ø—ã—Ç–æ–∫. –û—à–∏–±–∫–∞: {str(e)}")
                    return False
                
                wait_time = 60 * self.auth_attempts
                print(f"‚ö†Ô∏è {self.session_name}: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {self.auth_attempts}/{self.max_auth_attempts}). –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
                await asyncio.sleep(wait_time)
        return False
    
    async def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.target_chats:
            print(f"‚ùå {self.session_name}: –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
            return

        current_time = datetime.now().strftime("%H:%M:%S")
        print(f"‚è∞ [{current_time}] {self.session_name}: –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏...")
        
        success_count = 0
        for chat in self.target_chats:
            try:
                await self.client.send_message(chat, self.message_text)
                print(f"‚úÖ {self.session_name}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat}")
                success_count += 1
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                print(f"‚ùå {self.session_name}: –û—à–∏–±–∫–∞ –≤ {chat}: {e}")
        
        print(f"üìä {self.session_name}: –ò—Ç–æ–≥ - {success_count}/{len(self.target_chats)} —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫")
    
    async def forward_scheduled_message(self):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã —Å—Ç—Ä–æ–≥–æ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        if not self.target_chats or self.forward_message_id is None:
            print(f"‚ùå {self.session_name}: –ù–µ—Ç —á–∞—Ç–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏!")
            return

        current_time = datetime.now().strftime("%H:%M:%S")
        print(f"‚è∞ [{current_time}] {self.session_name}: –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ :{self.cron_minute:02d})...")
        
        success_count = 0
        for chat in self.target_chats:
            try:
                await self.client.forward_messages(chat, self.forward_message_id, source_chat)
                print(f"‚úÖ {self.session_name}: –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {chat}")
                success_count += 1
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ—Å—ã–ª–∫–∞–º–∏
            except Exception as e:
                print(f"‚ùå {self.session_name}: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {chat}: {e}")
        
        print(f"üìä {self.session_name}: –ò—Ç–æ–≥ - {success_count}/{len(self.target_chats)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ—Å—ã–ª–æ–∫")
    
    def set_send_offset(self, total_accounts, account_index):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        self.send_offset = account_index * (self.send_interval // total_accounts)
        print(f"‚è± {self.session_name}: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–º–µ—â–µ–Ω–∏–µ {self.send_offset} –º–∏–Ω.")
    
    async def disconnect(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.is_authenticated:
            await self.client.disconnect()
            print(f"üîå {self.session_name}: –û—Ç–∫–ª—é—á–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
accounts = [Account(**acc) for acc in ACCOUNTS]

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (0, 10, 20, 30, 40, 50)
for i, account in enumerate(accounts):
    account.cron_minute = i * 10

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–£–î–ê–õ–ï–ù–´ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å forward_interval) ===
@dp.callback_query(F.data == "forward_message")
async def inline_forward_message(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ê–∫–∫–∞—É–Ω—Ç {i+1}", callback_data=f"set_id_{i}") for i in range(3)],
        [InlineKeyboardButton(text=f"–ê–∫–∫–∞—É–Ω—Ç {i+4}", callback_data=f"set_id_{i+3}") for i in range(3)],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("set_id_"))
async def inline_set_account_id(callback: types.CallbackQuery, state: FSMContext):
    account_idx = int(callback.data.split("_")[2])
    await state.update_data(account_idx=account_idx)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_idx+1}:")
    await state.set_state(Form.set_forward_id)
    await callback.answer()

@dp.message(Form.set_forward_id)
async def process_set_forward_id(message: Message, state: FSMContext):
    try:
        msg_id = int(message.text)
        data = await state.get_data()
        account_idx = data['account_idx']
        accounts[account_idx].forward_message_id = msg_id
        
        await message.answer(
            f"‚úÖ –î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_idx+1} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ID: {msg_id}\n"
            f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤ :{accounts[account_idx].cron_minute:02d} –º–∏–Ω—É—Ç"
        )
    except ValueError:
        await message.answer("‚ùå ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    finally:
        await state.clear()

@dp.callback_query(F.data == "start_forward_schedule")
async def inline_start_forward_schedule(callback: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ID
    for i, account in enumerate(accounts):
        if account.forward_message_id is None:
            await callback.answer(
                f"‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}!",
                show_alert=True
            )
            return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
    for account in accounts:
        job_id = f'auto_forward_{account.session_name}'
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
    for account in accounts:
        scheduler.add_job(
            account.forward_scheduled_message,
            'cron',
            minute=account.cron_minute,
            id=f'auto_forward_{account.session_name}'
        )
        account.is_forward_scheduled = True
    
    schedule_info = "\n".join([
        f"–ê–∫–∫–∞—É–Ω—Ç {i+1} (ID:{acc.forward_message_id}) ‚Üí :{acc.cron_minute:02d} –º–∏–Ω"
        for i, acc in enumerate(accounts)
    ])
    
    await callback.message.edit_text(
        f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n\n{schedule_info}",
        reply_markup=get_main_keyboard()
    )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (0, 10, 20, 30, 40, 50)
for i, account in enumerate(accounts):
    account.cron_minute = i * 10

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def log_action(action: str, account: Account):
    logging.info(f"{account.session_name} | {action} | –¢–µ–∫—Å—Ç: '{account.message_text}' | –ß–∞—Ç—ã: {len(account.target_chats)}")

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_now")],
        [
            InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_schedule"),
            InlineKeyboardButton(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_schedule")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="set_text"),
            InlineKeyboardButton(text="‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="set_interval")
        ],
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="remove_chat"),
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data="list_chats")
        ],
        [
            InlineKeyboardButton(text="üåê –í—ã–±—Ä–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="select_all_chats"),
            InlineKeyboardButton(text="‚ÜóÔ∏è –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="forward_message")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É", callback_data="start_forward_schedule"),
            InlineKeyboardButton(text="üõë –°—Ç–æ–ø –ø–µ—Ä–µ—Å—ã–ª–∫—É", callback_data="stop_forward_schedule")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@dp.message(Command('start'))
async def cmd_start(message: Message):
    account = accounts[0]
    schedule_info = "\n".join([f"–ê–∫–∫–∞—É–Ω—Ç {i+1} ‚Üí :{acc.cron_minute:02d} –º–∏–Ω" for i, acc in enumerate(accounts)])
    
    await message.answer(
        "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
        f"üìù –¢–µ–∫—Å—Ç: <code>{account.message_text}</code>\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{account.send_interval} –º–∏–Ω.</b>\n"
        f"üìä –ß–∞—Ç–æ–≤: <b>{len(account.target_chats)}</b>\n"
        f"üîÅ –†–∞—Å—Å—ã–ª–∫–∞: <b>{'–í–ö–õ' if account.is_scheduled else '–í–´–ö–õ'}</b>\n"
        f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞: <b>{'–í–ö–õ' if account.is_forward_scheduled else '–í–´–ö–õ'}</b>\n\n"
        f"‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:</b>\n{schedule_info}\n\n"
        "–î–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ @VitalikOnyshch:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ <b>‚ÜóÔ∏è –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
        "2. –í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—ã–ª–∫—É",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command('addchat'))
async def cmd_add_chat(message: Message):
    try:
        chat_link = message.text.split(maxsplit=1)[1]
        for account in accounts:
            if chat_link not in account.target_chats:
                account.target_chats.append(chat_link)
                log_action(f"CHAT_ADDED: {chat_link}", account)
        await message.answer(f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã: <code>{chat_link}</code>")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É: /addchat <—Å—Å—ã–ª–∫–∞_–Ω–∞_—á–∞—Ç>")

@dp.message(Command('removechat'))
async def cmd_remove_chat(message: Message):
    if not accounts[0].target_chats:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç!")
        return

    try:
        chat_link = message.text.split(maxsplit=1)[1]
        for account in accounts:
            if chat_link in account.target_chats:
                account.target_chats.remove(chat_link)
                log_action(f"CHAT_REMOVED: {chat_link}", account)
        await message.answer(f"‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <code>{chat_link}</code>")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É: /removechat <—Å—Å—ã–ª–∫–∞_–Ω–∞_—á–∞—Ç>")

@dp.message(Command('listchats'))
async def cmd_list_chats(message: Message):
    if not accounts[0].target_chats:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç!")
        return

    chats_list = "\n".join([f"{i+1}. {chat}" for i, chat in enumerate(accounts[0].target_chats)])
    await message.answer(f"üìã <b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç):</b>\n\n{chats_list}")

@dp.message(Command('settext'))
async def cmd_settext(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) > 1:
        for account in accounts:
            account.message_text = parts[1]
            log_action("TEXT_CHANGED", account)
        await message.answer(f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n<code>{parts[1]}</code>")
    else:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: /settext <–≤–∞—à_—Ç–µ–∫—Å—Ç>")

@dp.message(Command('settime'))
async def cmd_settime(message: Message):
    try:
        new_interval = int(message.text.split()[1])
        if new_interval < 1:
            raise ValueError
        
        for account in accounts:
            account.send_interval = new_interval
            if account.is_scheduled:
                scheduler.reschedule_job(f'auto_send_{account.session_name}', trigger='interval', minutes=account.send_interval)
            log_action("INTERVAL_CHANGED", account)
        
        await message.answer(f"‚úÖ –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{new_interval} –º–∏–Ω.</b>")
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç: /settime <—á–∏—Å–ª–æ>")

@dp.message(Command('forward'))
async def cmd_forward(message: Message):
    try:
        msg_id = int(message.text.split()[1])
        if not accounts[0].target_chats:
            await message.answer("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏!")
            return

        total_success = 0
        for account in accounts:
            if not account.target_chats:
                continue
                
            success = 0
            for chat in account.target_chats:
                try:
                    await account.client.forward_messages(chat, msg_id, source_chat)
                    success += 1
                except Exception as e:
                    print(f"‚ùå {account.session_name}: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {chat}: {e}")
            
            total_success += success
            print(f"‚úÖ {account.session_name}: –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {success}/{len(account.target_chats)} —á–∞—Ç–æ–≤")

        await message.answer(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {total_success}/{sum(len(acc.target_chats) for acc in accounts)} —á–∞—Ç–æ–≤!")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /forward <ID_—Å–æ–æ–±—â–µ–Ω–∏—è>")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query(F.data == "send_now")
async def inline_send_now(callback: types.CallbackQuery):
    await asyncio.gather(*[account.send_message() for account in accounts])
    await callback.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ —á–∞—Ç—ã –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö!")

@dp.callback_query(F.data == "start_schedule")
async def inline_start_schedule(callback: types.CallbackQuery):
    for account in accounts:
        if not account.is_scheduled:
            scheduler.add_job(
                account.send_message, 
                'interval', 
                minutes=account.send_interval, 
                id=f'auto_send_{account.session_name}'
            )
            account.is_scheduled = True
            log_action("SCHEDULE_STARTED", account)
    
    await callback.message.edit_text(
        f"üîÅ –†–∞—Å—Å—ã–ª–∫–∞ <b>–∑–∞–ø—É—â–µ–Ω–∞</b> –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö (–∫–∞–∂–¥—ã–µ {accounts[0].send_interval} –º–∏–Ω.)",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "stop_schedule")
async def inline_stop_schedule(callback: types.CallbackQuery):
    for account in accounts:
        if account.is_scheduled:
            scheduler.remove_job(f'auto_send_{account.session_name}')
            account.is_scheduled = False
            log_action("SCHEDULE_STOPPED", account)
    
    await callback.message.edit_text(
        "‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ <b>–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b> –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "set_text")
async def inline_set_text(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
    await state.set_state(Form.set_text)
    await callback.answer()

@dp.message(Form.set_text)
async def process_set_text(message: Message, state: FSMContext):
    for account in accounts:
        account.message_text = message.text
        log_action("TEXT_CHANGED", account)
    
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö:\n<code>{message.text}</code>")
    await state.clear()

@dp.callback_query(F.data == "set_interval")
async def inline_set_interval(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
    await state.set_state(Form.set_interval)
    await callback.answer()

@dp.message(Form.set_interval)
async def process_set_interval(message: Message, state: FSMContext):
    try:
        new_interval = int(message.text)
        if new_interval < 1:
            raise ValueError
            
        for account in accounts:
            account.send_interval = new_interval
            if account.is_scheduled:
                scheduler.reschedule_job(f'auto_send_{account.session_name}', trigger='interval', minutes=account.send_interval)
            log_action("INTERVAL_CHANGED", account)
        
        await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_interval} –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
    finally:
        await state.clear()

@dp.callback_query(F.data == "add_chat")
async def inline_add_chat(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —á–∞—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
    await state.set_state(Form.add_chat)
    await callback.answer()

@dp.message(Form.add_chat)
async def process_add_chat(message: Message, state: FSMContext):
    chat_link = message.text.strip()
    if chat_link.startswith(('https://t.me/', 't.me/')):
        chat_link = '@' + chat_link.split('/')[-1]
    
    for account in accounts:
        if chat_link not in account.target_chats:
            account.target_chats.append(chat_link)
            log_action(f"CHAT_ADDED: {chat_link}", account)
    
    await message.answer(f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã: <code>{chat_link}</code>")
    await state.clear()

@dp.callback_query(F.data == "remove_chat")
async def inline_remove_chat(callback: types.CallbackQuery, state: FSMContext):
    if not accounts[0].target_chats:
        await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç!", show_alert=True)
        return
        
    chats_list = "\n".join([f"{i+1}. {chat}" for i, chat in enumerate(accounts[0].target_chats)])
    await callback.message.answer(
        f"üìã –¢–µ–∫—É—â–∏–µ —á–∞—Ç—ã (–ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç):\n\n{chats_list}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:"
    )
    await state.set_state(Form.remove_chat)
    await callback.answer()

@dp.message(Form.remove_chat)
async def process_remove_chat(message: Message, state: FSMContext):
    try:
        chat_num = int(message.text)
        if 1 <= chat_num <= len(accounts[0].target_chats):
            removed_chat = accounts[0].target_chats[chat_num-1]
            for account in accounts:
                if removed_chat in account.target_chats:
                    account.target_chats.remove(removed_chat)
                    log_action(f"CHAT_REMOVED: {removed_chat}", account)
            
            await message.answer(f"‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <code>{removed_chat}</code>")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞!")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞")
    finally:
        await state.clear()

@dp.callback_query(F.data == "list_chats")
async def inline_list_chats(callback: types.CallbackQuery):
    if not accounts[0].target_chats:
        await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç!", show_alert=True)
        return

    chats_list = "\n".join([f"{i+1}. {chat}" for i, chat in enumerate(accounts[0].target_chats)])
    await callback.message.edit_text(
        f"üìã <b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç):</b>\n\n{chats_list}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )

@dp.callback_query(F.data == "back_to_main")
async def inline_back_to_main(callback: types.CallbackQuery):
    account = accounts[0]
    await callback.message.edit_text(
        "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
        f"üìù –¢–µ–∫—Å—Ç: <code>{account.message_text}</code>\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{account.send_interval} –º–∏–Ω.</b>\n"
        f"üìä –ß–∞—Ç–æ–≤: <b>{len(account.target_chats)}</b>\n"
        f"üîÅ –†–∞—Å—Å—ã–ª–∫–∞: <b>{'–í–ö–õ' if account.is_scheduled else '–í–´–ö–õ'}</b>\n"
        f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞: <b>{'–í–ö–õ' if account.is_forward_scheduled else '–í–´–ö–õ'}</b>",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "select_all_chats")
async def inline_select_all_chats(callback: types.CallbackQuery):
    try:
        for account in accounts:
            dialogs = await account.client.get_dialogs()
            all_chats = []
            
            for dialog in dialogs:
                entity = dialog.entity
                if hasattr(entity, 'username') and entity.username:
                    all_chats.append(f"@{entity.username}")
                elif hasattr(entity, 'id'):
                    try:
                        invite = await account.client.get_entity(entity)
                        if hasattr(invite, 'username') and invite.username:
                            all_chats.append(f"@{invite.username}")
                    except:
                        continue
            
            account.target_chats.clear()
            account.target_chats.extend(all_chats)
            
            log_action("SELECTED_ALL_CHATS", account)
        
        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ —á–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!", show_alert=True)
        
        await callback.message.edit_text(
            "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
            f"üìù –¢–µ–∫—Å—Ç: <code>{accounts[0].message_text}</code>\n"
            f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{accounts[0].send_interval} –º–∏–Ω.</b>\n"
            f"üìä –ß–∞—Ç–æ–≤: <b>{len(accounts[0].target_chats)}</b>\n"
            f"üîÅ –†–∞—Å—Å—ã–ª–∫–∞: <b>{'–í–ö–õ' if accounts[0].is_scheduled else '–í–´–ö–õ'}</b>\n"
            f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞: <b>{'–í–ö–õ' if accounts[0].is_forward_scheduled else '–í–´–ö–õ'}</b>",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@dp.callback_query(F.data == "forward_message")
async def inline_forward_message(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
    await state.set_state(Form.forward_message)
    await callback.answer()

@dp.message(Form.forward_message)
async def process_forward_message(message: Message, state: FSMContext):
    try:
        msg_id = int(message.text)
        for account in accounts:
            account.forward_message_id = msg_id
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        for i, account in enumerate(accounts):
            account.cron_minute = i * 10  # 0, 10, 20, 30, 40, 50
            scheduler.add_job(
                account.forward_scheduled_message,
                'cron',
                minute=account.cron_minute,
                id=f'auto_forward_{account.session_name}'
            )
            account.is_forward_scheduled = True
            log_action("FORWARD_SCHEDULE_STARTED", account)
        
        schedule_info = "\n".join([f"–ê–∫–∫–∞—É–Ω—Ç {i+1} ‚Üí :{i*10:02d} –º–∏–Ω" for i in range(len(accounts))])
        
        await message.answer(
            f"‚úÖ ID —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {msg_id}\n"
            f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n\n{schedule_info}",
            reply_markup=get_main_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    finally:
        await state.clear()

# –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
Form.forward_interval = None  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

@dp.callback_query(F.data == "set_forward_interval")
async def inline_set_forward_interval(callback: types.CallbackQuery):
    # –ë–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    await callback.answer("‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)

@dp.callback_query(F.data == "start_forward_schedule")
async def inline_start_forward_schedule(callback: types.CallbackQuery):
    if accounts[0].forward_message_id is None:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏!", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    for account in accounts:
        job_id = f'auto_forward_{account.session_name}'
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å cron-—Ç—Ä–∏–≥–≥–µ—Ä–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    for account in accounts:
        scheduler.add_job(
            account.forward_scheduled_message,
            'cron',
            minute=account.cron_minute,  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –º–∏–Ω—É—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            id=f'auto_forward_{account.session_name}'
        )
        account.is_forward_scheduled = True
        log_action("FORWARD_SCHEDULE_STARTED", account)
        print(f"‚è∞ {account.session_name}: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤ :{account.cron_minute:02d} –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞")
    
    schedule_info = "\n".join([f"–ê–∫–∫–∞—É–Ω—Ç {i+1} ‚Üí :{acc.cron_minute:02d} –º–∏–Ω" for i, acc in enumerate(accounts)])
    await callback.message.edit_text(
        f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ <b>–∑–∞–ø—É—â–µ–Ω–∞</b> –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n\n{schedule_info}",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "stop_forward_schedule")
async def inline_stop_forward_schedule(callback: types.CallbackQuery):
    for account in accounts:
        job_id = f'auto_forward_{account.session_name}'
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
            account.is_forward_scheduled = False
            log_action("FORWARD_SCHEDULE_STOPPED", account)
    
    await callback.message.edit_text(
        "üõë –ü–µ—Ä–µ—Å—ã–ª–∫–∞ <b>–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b> –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö",
        reply_markup=get_main_keyboard()
    )

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for i, account in enumerate(accounts):
        print(f"‚åõ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}/{len(accounts)} ({account.phone})...")
        success = await account.start()
        
        if not success:
            print(f"‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç {account.phone} –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            continue
            
        if i < len(accounts) - 1:
            delay = 3  # 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
            print(f"‚è≥ –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")
            await asyncio.sleep(delay)
    
    print("‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
